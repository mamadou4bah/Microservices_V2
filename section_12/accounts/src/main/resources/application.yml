  server:
    port: 8080
  spring:
    application:
      name: "accounts" # This name match with the name accounts....yml mentionned in configserver
    profiles:
      active: "prod"
    datasource:
      url: jdbc:mysql://localhost:3306/accountsdb # install manually sqlectron to view the data #docker run -p 3306:3306 --name accountsdb -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=accountsdb -d mysql
      username: root
      password: root
    jpa:
      show-sql: true
    sql:
      init:
        mode: always
    config:
      import: "optional:configserver:http://localhost:8071/"
    cloud:
      openfeign:
        circuitbreaker:
          enabled: true
    rabbitmq: # 2) spring cloud bus (RabbitMQ => Message Broker) to refresh all the instance of microservice without invoque any API when the code is change
      host: "localhost"
      port: 5672
      username: "guest"
      password: "guest"
  # 1) Refresh the microservice if spring cloud config change (refresh manually all the microservices)
  management:
    endpoints:
      web:
        exposure:
          include: "*"
          # 1) include: "refresh" # actuactor (refresh manually all the microservices)
          # 2) include: "busRefresh" # actuactor (refresh only one microservice)
          # 3) webHook github (no need to refresh) => https://console.hookdeck.com/ https://hookdeck.com/  (hookdeck logout)
          # google jib for docker images => mvn compile jib:dockerBuild
          # docker image push docker.io/mamadou4bah/accounts:s8
    health:
      readiness-state:
        enabled: true
      liveness-state:
        enabled: true
    endpoint: # Unregister the accounts microservice in eurekaserver if his health is bad
      shutdown:
        enabled: true
      health:
        probes:
          enabled: true
    info:
      env:
        enabled: true
    metrics:
      tags:
        application: ${spring.application.name}

  endpoints:
    shutdown:
      enabled: true

  eureka:
    instance:
      preferIpAddress: true
    client:
      fetchRegistry: true # Account microservice try to fetch details registry to be able to connect into the registry
      registerWithEureka: true # Account microservice to be register into the eurekaserver
      serviceUrl:
        defaultZone: http://localhost:8070/eureka/

  info:
    app:
      name: "accounts"
      description: "bmwas-consulting Accounts Application"
      version: "1.0.0"

  logging:
    level:
      com:
        mamadou4bah:
          accounts: DEBUG
    pattern: # for tracing logs using opentelemetry [tagID, traceID, spanID] (https://opentelemetry.io/docs/zero-code/java/agent/)
      level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

#https://resillience4j.readme.io/docs/getting-started-3
  resilience4j.circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        failureRateThreshold: 50
        waitDurationInOpenState: 10000

  resilience4j.retry:
    configs:
      default:
        maxRetryAttempts: 3
        waitDuration: 500
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        ignoreExceptions:
          - java.lang.NullPointerException
        retryExceptions:
          - java.util.concurrent.TimeoutException

  resilience4j.ratelimiter:
    configs:
      default:
        timeoutDuration: 1000
        limitRefreshPeriod: 5000
        limitForPeriod: 1